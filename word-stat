;; Adapted function from stackexchane for my org-mode chapter drafts
;; References:
;; s.el at https://github.com/magnars/s.el
;; https://emacs.stackexchange.com/a/13518/16948
;; s.el was saved to my emacs load path and its functions called thereof

(require 'cl-lib)
(require 's)

(defvar punctuation-marks '(","
                            "."
                            "'"
                            "&"
                            "\"")
  "List of Punctuation Marks that you want to count.")

(defun count-raw-word-list (raw-word-list)
  (cl-loop with result = nil
           for elt in raw-word-list
           do (cl-incf (cdr (or (assoc elt result)
                             (first (push (cons elt 0) result)))))
           finally return (sort result
                                (lambda (a b) (string< (car a) (car b))))))

(defun word-stats ()
  (interactive)
  (let* ((words (split-string
                 (downcase (buffer-string))
                 (format "[ %s\f\t\n\r\v]+"
                         (mapconcat #'identity punctuation-marks ""))
                 t))
         (punctuation-marks (cl-remove-if-not
                             (lambda (elt) (member elt punctuation-marks))
                             (split-string (buffer-string) "" t )))
         (raw-word-list (append punctuation-marks words))
         (word-list (count-raw-word-list raw-word-list)))
    (with-current-buffer (get-buffer-create "*word-statistics*")
      (erase-buffer)
      (insert "| frequency | word |\n")

      (dolist (elt word-list)

	(setq freq (format "%d" (cdr elt)))
	;; (if (< 1 (string-to-number freq))
	(if (not (s-matches? "\\(^[(){}|$#\\\/0-9]\\)" (car elt)))
      (insert (format "| %d | %s |\n" (cdr elt) (car elt)))))

      (org-mode)
      (indent-region (point-min) (point-max))
      (goto-char 100)
      (org-cycle)
      (goto-char 79)
      (org-table-sort-lines nil ?N)))
  (pop-to-buffer "*word-statistics*"))




